name: Golden Image Build

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Docker Login
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
      uses: docker/login-action@v1.14.1
      with:
        # Server address of Docker registry. If not set then will default to Docker Hub
        # registry: # optional
        # Username used to log against the Docker registry
        username: ${{secrets.DOCKERHUB_USERNAME}}
        # Password or personal access token used to log against the Docker registry
        password: ${{secrets.DOCKERHUB_PASSWORD}}
        # Specifies whether the given registry is ECR (auto, true or false)
        # ecr: # optional, default is auto
        # Log out from the Docker registry at the end of a job
        # logout: # optional, default is true
    - name: Build and push Docker images
      # You may pin to the exact commit or the version.
      # uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
      uses: docker/build-push-action@v2.10.0
      with:
        # List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)
        # add-hosts: # optional
        # List of extra privileged entitlement (e.g., network.host,security.insecure)
        # allow: # optional
        # List of build-time variables
        # build-args: # optional
        # List of additional build contexts (e.g., name=path)
        # build-contexts: # optional
        # Builder instance
        # builder: # optional
        # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
        # cache-from: # optional
        # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
        # cache-to: # optional
        # Optional parent cgroup for the container used in the build
        # cgroup-parent: # optional
        # Build's context is the set of files located in the specified PATH or URL
        # context: # optional
        # Path to the Dockerfile
        file: Dockerfile # optional
        # List of metadata for an image
        labels: golden-image # optional
        # Load is a shorthand for --output=type=docker
        # load: # optional, default is false
        # Set the networking mode for the RUN instructions during build
        # network: # optional
        # Do not use cache when building the image
        # no-cache: # optional, default is false
        # List of output destinations (format: type=local,dest=path)
        # outputs: # optional
        # List of target platforms for build
        # platforms: # optional
        # Always attempt to pull all referenced images
        pull: true # optional, default is false
        # Push is a shorthand for --output=type=registry
        push: true # optional, default is false
        # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
        # secrets: # optional
        # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
        # secret-files: # optional
        # Size of /dev/shm (e.g., 2g)
        # shm-size: # optional
        # List of SSH agent socket or keys to expose to the build
        # ssh: # optional
        # List of tags
        tags: ddpana/golden-image:latest,ddpana/golden-image:${{ github.ref_name }}
        # Sets the target stage to build
        # target: # optional
        # Ulimit options (e.g., nofile=1024:1024)
        # ulimit: # optional
        # GitHub Token used to authenticate against a repository for Git context
        # github-token: # optional, default is ${{ github.token }}
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ./my-artifact.zip
    #     asset_name: my-artifact.zip
    #     asset_content_type: application/zip